<?xml version="1.0" encoding="UTF-8"?>
<infinispan xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="urn:infinispan:config:6.0 http://www.infinispan.org/schemas/infinispan-config-6.0.xsd"
            xmlns="urn:infinispan:config:6.0">

    <!-- *************************** -->
    <!-- System-wide global settings -->
    <!-- *************************** -->

    <global>

        <globalJmxStatistics
                enabled="true"
                cacheManagerName="default"
                allowDuplicateDomains="true"
                />

        <!-- If the transport is omitted, there is no way to create distributed or clustered
            caches. There is no added cost to defining a transport but not creating a cache that uses one,
            since the transport is created and initialized lazily. -->


            <!-- Note that the JGroups transport uses sensible defaults if no configuration
                property is defined. See the JGroupsTransport javadocs for more flags -->
        <!--<transport clusterName="OData-Cluster" >-->
        <!--</transport>-->

        <transport clusterName="OData-Cluster" transportClass="org.infinispan.remoting.transport.jgroups.JGroupsTransport">
            <properties>
                <property name="configurationFile" value="jgroups-tcp.xml" />
            </properties>
        </transport>

    </global>

    <!-- *************************************** -->
    <!--  Default Cache, with indexing enabled.  -->
    <!-- *************************************** -->
    <default>

        <!--<locking-->
                <!--lockAcquisitionTimeout="20000"-->
                <!--writeSkewCheck="false"-->
                <!--concurrencyLevel="500"-->
                <!--useLockStriping="false"/>-->

        <!-- This element specifies that the cache is clustered. modes supported: distribution
            (d), replication (r) or invalidation (i). Don't use invalidation to store Lucene indexes (as
            with Hibernate Search DirectoryProvider). Replication is recommended for best performance of
            Lucene indexes, but make sure you have enough memory to store the index in your heap.
            Also distribution scales much better than replication on high number of nodes in the cluster. -->
        <!--<clustering mode="replication">-->
            <!--&lt;!&ndash; Prefer loading all data at startup than later &ndash;&gt;-->
            <!--<stateTransfer timeout="480000" fetchInMemoryState="true"/>-->
            <!--&lt;!&ndash; Network calls are synchronous by default &ndash;&gt;-->
            <!--<sync replTimeout="20000"/>-->
        <!--</clustering>-->

        <jmxStatistics enabled="true"/>
        <!--<eviction-->
                <!--maxEntries="-1"-->
                <!--strategy="NONE"/>-->
        <!--<expiration-->
                <!--maxIdle="-1"-->
                <!--reaperEnabled="false"/>-->
    </default>

    <namedCache name="defaultCache">
        <!--<clustering mode="replication">-->
            <!--<stateTransfer fetchInMemoryState="true"/>-->
            <!--<sync replTimeout="25000"/>-->
            <!--&lt;!&ndash;<hash numOwners="2"/>&ndash;&gt;-->
        <!--</clustering>-->
    </namedCache>

    <namedCache name="mySpecialNamedCache">
        <!--<clustering mode="replication">-->
            <!--<stateTransfer fetchInMemoryState="true"/>-->
            <!--<sync replTimeout="25000"/>-->
            <!--&lt;!&ndash;<hash numOwners="2"/>&ndash;&gt;-->
        <!--</clustering>-->
    </namedCache>


</infinispan>
